# This file is managed by Salt - it's advised that you don't edit it.

input {

  file {
    path => "/srv/salt/emcopy-log/files/infile.txt"
    type => "emcopy-log"
  }
}

filter {

  #Strip leading and trailing whitespace from message
  mutate {
    strip => [ "message" ]
    rename => [ "path", "log_file" ] 
    remove_field => [ "@version" ]
  }

  #Strip out the cruft
  if [message] in [ "",
                    "EMCOPY64 04.14", 
                    "Copyright (C) 1999-2012, All Rights Reserved,", 
                    "by EMC Corporation, Hopkinton MA.",
                    "===================",
                    "==================",
                    "System information",
                    "Client OS                   : Microsoft  (build 9200)",
                    "Command information",
                    "Files and Dirs filter(s)    : *",
                    "List/Modify/Create options  : /d",
                    "Security options:           :",  
                    "Retry options               : /r:3 /w:5 /c"
                  ]
  {
    drop { }
  }  


  #Parse logs from EMCopy header
  else if "Server SRC" in [message] {
    grok {
      add_tag => [ "emc-header" ]
      match => [ "message", ".+ : %{WORD:source_hostname}" ] 
      add_field => { "info" => "EMCopy started from %{source_hostname}" }
      remove_field => [ "message" ]
      }
  } else if "Server DEST" in [message] {
    grok {
      add_tag => [ "emc-header" ]
      match => [ "message", ".+ : %{WORD:dest_hostname}" ] 
      add_field => { "info" => "EMCopy started from %{dest_hostname}" }
      remove_field => [ "message" ]
      }
  } else if "Date            " in [message] {
    grok {
      add_tag => [ "emc-header" ]
      match => [ "message", ".+ : %{DATE_EU:date_started} %{TIME:time_started}" ] 
      add_field => { "info" => "EMCopy started at %{time_started} on %{date_started}" }
      remove_field => [ "message" ]
      }
  } else if "Source path" in [message] {
    grok {
      add_tag => [ "emc-header" ]
      match => [ "message", ".+ : %{PATH:path}" ]
      remove_field => [ "message" ]
      }
  } else if "Desti. path" in [message] {
    grok {
      add_tag => [ "emc-header" ]
      match => [ "message", ".+ : %{PATH:path}" ] 
      remove_field => [ "message" ]
      }
  } else if "Directory options" in [message] {
    grok {
      add_tag => [ "emc-header" ]
      match => [ "message", ".+: %{GREEDYDATA:options}" ]
      remove_field => [ "message" ]
      add_field => { "info" => "EMCopy run with %{options}" }
    }
  } else if "Log file   " in [message] {
    grok {
      add_tag => [ "emc-header" ]
      match => [ "message", ".+: /log:%{PATH:path}" ]
      remove_field => [ "message" ]
    }
  } else if "Processing the copy from " in [message] {
    drop { }
 
  } else {
    grok {
      match => [ "message", "\w\w%{INT} : %{TIME:time_copied} : (?<path>(?>[A-Za-z]+:|\\)(?:\\[^\\*]*)+)" ]
    }
  }
}

output {
  stdout { codec => rubydebug }
  #redis { host => "ixllvmva32.hogarthww.prv" data_type => "list" key => "logstash" }
}
